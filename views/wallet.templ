package views

type WalletViewData struct {
	WalletID string
}

templ WalletView(viewObj *ViewObj, data WalletViewData) {
	@DefaultLayout(viewObj) {
		<div id="sse"></div>
	}
}

var activeStyleWalletInsideHeaderComponent = "inline-block p-4 text-primary bg-gray-100 border border-primary"
var passiveStyleWalletInsideHeaderComponent = "inline-block p-4 hover:text-primary hover:bg-gray-50 mousehover"

templ WalletInsideHeaderComponent(walletID string, walletTitle string, activeUrl string) {
	<div class="flex flex-col mb-4 md:mb-6">
		@H1Component([]string{}) {
			if walletTitle != "" {
				walletTitle
			} else {
				Wallet
			}
		}
		<span class="text-gray-500 text-sm mt-4">{ walletID }</span>
	</div>
	<div>
		<ul class="flex flex-wrap text-md font-medium text-center text-gray-500 border-b border-primary mb-5">
			<li class="mr-2">
				<a
 					href={ templ.SafeURL("/wallet/" + walletID) }
 					aria-current="page"
 					if activeUrl == "/positions" || activeUrl == "/" {
						class={ activeStyleWalletInsideHeaderComponent }
					} else {
						class={ passiveStyleWalletInsideHeaderComponent }
					}
				>Positions</a>
			</li>
			<li class="mr-2">
				<a
 					href={ templ.SafeURL("/wallet/" + walletID + "/transactions") }
 					if activeUrl == "/transactions" {
						class={ activeStyleWalletInsideHeaderComponent }
					} else {
						class={ passiveStyleWalletInsideHeaderComponent }
					}
				>Transactions</a>
			</li>
			<li class="mr-2">
				<a
 					href={ templ.SafeURL("/wallet/" + walletID + "/staking") }
 					if activeUrl == "/staking" {
						class={ activeStyleWalletInsideHeaderComponent }
					} else {
						class={ passiveStyleWalletInsideHeaderComponent }
					}
				>Staking</a>
			</li>
		</ul>
	</div>
}

type WalletInsideViewData struct {
	WalletID    string
	WalletTitle string
	ActiveUrl   string
}

templ WalletInsideView(data WalletInsideViewData) {
	@WalletInsideHeaderComponent(data.WalletID, data.WalletTitle, data.ActiveUrl)
	<div class="flex flex-row flex-1 w-full">
		<div class="">
			<div class="rounded-sm border bg-white px-5 py-5 shadow-sm">
				<div class="flex flex-col">
					<div class="">
						@H4Component([]string{""}) {
							₳: 10000.0000
						}
					</div>
					<div class="">
						@H4Component([]string{""}) {
							€: 10000.00
						}
					</div>
					<span class="text-gray-500 text-sm mt-4">Total Balance</span>
				</div>
			</div>
			<div class="">
				<div class="rounded-sm border bg-white px-5 py-5 shadow-sm ">
					<div class="flex flex-col">
						<div class="">
							@H4Component([]string{""}) {
								₳: 10000.0000
							}
							@H4Component([]string{""}) {
								€: 10000.00
							}
						</div>
						<span class="text-gray-500 text-sm mt-4">Total Balance</span>
					</div>
				</div>
			</div>
		</div>
		<div class="flex flex-1">
			<div class="rounded-sm border bg-white px-5 py-5 shadow-sm w-full">chart</div>
		</div>
	</div>
	@H3Component([]string{"mt-4"}) {
		Positions
	}
}

templ WalletInsideViewTransactions(data WalletInsideViewData) {
	@WalletInsideHeaderComponent(data.WalletID, data.WalletTitle, data.ActiveUrl)
	@H3Component([]string{"mt-4"}) {
		Transactions
	}
}


type WalletInsideViewStakingOverviewYear struct {
    Year string
    Ada  string
    Fiat string
}

type WalletInsideViewStakingOverviewData struct {
    Years []WalletInsideViewStakingOverviewYear
    TotalAda string
    TotalFiat string
}

templ WalletInsideViewStakingOverview(data WalletInsideViewStakingOverviewData) {
	<div class="mt-2">
		// table iterating over
        <table class="table-auto border-collapse border-spacing-0">
            <thead>
                <tr>
                    <th class="py-4 px-6 bg-gray-100 font-bold border-b border-gray-200">Year</th>
                    <th class="py-4 px-6 bg-gray-100 font-bold border-b border-gray-200">ADA</th>
                    <th class="py-4 px-6 bg-gray-100 font-bold border-b border-gray-200">Fiat</th>
                </tr>
            </thead>
            <tbody>
                // for each data.Years
                <tr class="hover:bg-gray-100">
                    <td class="py-4 px-6 border-b border-gray-200">value</td>
                    <td class="py-4 px-6 border-b border-gray-200">value</td>
                    <td class="py-4 px-6 border-b border-gray-200">value</td>
                </tr>
                // sums
                <tr class="hover:bg-gray-100 font-semibold">
                    <td class="py-4 px-6 border-b border-gray-200">Total</td>
                    <td class="py-4 px-6 border-b border-gray-200">
                        { data.TotalAda }
                    </td>
                    <td class="py-4 px-6 border-b border-gray-200">
                        { data.TotalFiat }
                    </td>
                </tr>
            </tbody>
        </table>
	</div>
}

type AccountAvailableYears struct {
	Year string
}

type WalletInsideViewStakingData struct {
	AvailableYears []AccountAvailableYears
	SelectedYear   string // all | year
    AllData        WalletInsideViewStakingOverviewData
}

templ WalletInsideViewStaking(data WalletInsideViewData, stakingData WalletInsideViewStakingData) {
	@WalletInsideHeaderComponent(data.WalletID, data.WalletTitle, data.ActiveUrl)
	@H3Component([]string{"mt-4"}) {
		if stakingData.SelectedYear == "all" {
			Staking Overview
		} else {
			Staking { stakingData.SelectedYear }
		}
	}
	<div>
		<ul class="flex flex-wrap text-sm font-medium text-center text-gray-500 border-b border-gray-20">
			<li class="me-2">
				<a
 					href={ templ.SafeURL("/wallet/" + data.WalletID + "/staking?year=all") }
 					aria-current="page"
 					if stakingData.SelectedYear == "all" {
						class="inline-block p-4 text-blue-600 bg-gray-300 rounded-t-lg"
					} else {
						class="inline-block p-4 rounded-t-lg hover:text-gray-600 hover:bg-gray-50 mousehover"
					}
				>Overview</a>
			</li>
			// for each stakingData.AccountAvailableYear
			<li class="me-2">
				for _, year := range stakingData.AvailableYears {
					<a
 						href={ templ.SafeURL("/wallet/" + data.WalletID + "/staking?year=" + year.Year) }
 						aria-current="page"
 						if stakingData.SelectedYear == year.Year {
							class="inline-block p-4 text-blue-600 bg-gray-300 rounded-t-lg"
						} else {
							class="inline-block p-4 rounded-t-lg hover:text-gray-600 hover:bg-gray-50 mousehover"
						}
					>{ year.Year }</a>
				}
			</li>
		</ul>
	</div>
	@WalletInsideViewStakingOverview(stakingData.AllData)
}
